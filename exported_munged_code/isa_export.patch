--- isa_export.ml.orig	2018-05-10 09:49:44.632872948 +0100
+++ isa_export.ml.patched	2018-05-10 09:51:47.406821650 +0100
@@ -1,3 +1,15 @@
+(** This file is exported from Isabelle, and lightly patched (eg to
+   include this comment!). The OCaml interfaces wrap this basic
+   functionality. *)
+
+module Res = struct
+  include Pervasives
+  type 'a res = ('a,string) result
+end
+
+let check_flag = ref true
+
+
 module Fun : sig
   val id : 'a -> 'a
   val comp : ('a -> 'b) -> ('c -> 'a) -> 'c -> 'b
@@ -295,7 +307,7 @@ end = struct
 
 type error = String_error of string;;
 
-type 'a res = Ok of 'a | Error of error;;
+include Res 
 
 let rec is_Ok x = (match x with Ok _ -> true | Error _ -> false);;
 
@@ -307,9 +319,9 @@ let rec is_None x = Option.is_none x;;
 
 let rec rev_apply x f = f x;;
 
-let rec failwitha x = rev_apply "FIXME patch" (fun _ -> failwith "undefined");;
+let rec failwitha x = failwith x
 
-let rec check_true f = rev_apply "FIXME patch" (fun _ -> failwith "undefined");;
+let rec check_true f = if !check_flag then (let b = f () in assert(b);b) else true;;
 
 let rec split_at
   n xs =
@@ -501,7 +513,7 @@ let ck2_tests : unit
       in
     ();;
 
-let rec kvs_equal x = Util.failwitha "FIXME patch" x;;
+let rec kvs_equal x y = (x=y)
 
 let rec ordered_key_list
   ord ks =
@@ -622,7 +634,7 @@ end;; (*struct Prelude*)
 
 module Searching_and_splitting : sig
   type ('a, 'b, 'c) rsplit_node_ext =
-    Rsplit_node_ext of 'a list * 'b list * 'b * 'a list * 'b list * 'c
+    Rsplit_node_ext of 'a list * 'b list * 'b * 'a list * 'b list * 'c [@@deriving yojson]
   val split_leaf :
     unit Prelude.constants_ext ->
       ('a * 'b) list -> ('a * 'b) list * ('a * ('a * 'b) list)
@@ -663,7 +675,7 @@ module Searching_and_splitting : sig
 end = struct
 
 type ('a, 'b, 'c) rsplit_node_ext =
-  Rsplit_node_ext of 'a list * 'b list * 'b * 'a list * 'b list * 'c;;
+  Rsplit_node_ext of 'a list * 'b list * 'b * 'a list * 'b list * 'c  [@@deriving yojson];;
 
 let rec aux
   cmp k0 ks_rs1 ks_rs2 =
@@ -800,7 +812,7 @@ end;; (*struct Searching_and_splitting*)
 
 module Tree : sig
   type ('a, 'b) tree = Node of ('a list * ('a, 'b) tree list) |
-    Leaf of ('a * 'b) list
+    Leaf of ('a * 'b) list  [@@deriving yojson]
   val height : ('a, 'b) tree -> Arith.nat
   val dest_Node : ('a, 'b) tree -> 'a list * ('a, 'b) tree list
   val tree_equal : ('a, 'b) tree -> ('a, 'b) tree -> bool
@@ -814,7 +826,7 @@ module Tree : sig
 end = struct
 
 type ('a, 'b) tree = Node of ('a list * ('a, 'b) tree list) |
-  Leaf of ('a * 'b) list;;
+  Leaf of ('a * 'b) list  [@@deriving yojson];;
 
 let rec tree_to_subtrees
   t0 = (match t0
@@ -909,7 +921,7 @@ let rec dest_Node
   = function Node (ks, rs) -> (ks, rs)
     | Leaf uu -> Util.failwitha "dest_Node";;
 
-let rec tree_equal t1 t2 = Util.failwitha "FIXME patch";;
+let rec tree_equal t1 t2 = (t1=t2)
 
 let rec tree_to_leaves
   t0 = (match t0
@@ -983,6 +995,7 @@ let rec wellformed_tree
 end;; (*struct Tree*)
 
 module Tree_stack : sig
+  type ('k,'a) rstack = ('k,'a,unit) Searching_and_splitting.rsplit_node_ext list
   val rstack_map :
     ('a -> 'b) ->
       ('c, 'a, unit) Searching_and_splitting.rsplit_node_ext list ->
@@ -1012,6 +1025,8 @@ module Tree_stack : sig
                 ('a, 'b, unit) Searching_and_splitting.rsplit_node_ext list * 'b
 end = struct
 
+type ('k,'a) rstack = ('k,'a,unit) Searching_and_splitting.rsplit_node_ext list
+
 let rec rstack_map
   f stk =
     Util.rev_apply stk (List.map (Searching_and_splitting.rsplit_node_map f));;
@@ -1026,7 +1041,7 @@ let rec no_focus
 let rec r_stk_to_rs
   xs = Util.rev_apply xs (List.map Searching_and_splitting.r_t);;
 
-let rec rstack_equal s1 s2 = Util.failwitha "FIXME patch";;
+let rec rstack_equal s1 s2 = (s1=s2)
 
 let rec tree_to_rstack
   ord k t n =
@@ -1073,7 +1088,7 @@ module Find_state : sig
     | F_finished of
         ('c * ('a * ('c * (('a * 'b) list *
                             ('a, 'c, unit)
-                              Searching_and_splitting.rsplit_node_ext list))))
+                              Searching_and_splitting.rsplit_node_ext list))))  [@@deriving yojson]
   val dummy : unit
   val wf_trans :
     'a * ('b, 'c, 'd) find_state -> 'a * ('b, 'c, 'd) find_state -> bool
@@ -1099,7 +1114,7 @@ type ('a, 'b, 'c) find_state =
   | F_finished of
       ('c * ('a * ('c * (('a * 'b) list *
                           ('a, 'c, unit)
-                            Searching_and_splitting.rsplit_node_ext list))));;
+                            Searching_and_splitting.rsplit_node_ext list))))  [@@deriving yojson];;
 
 let dummy : unit = ();;
 
@@ -1154,14 +1169,14 @@ end;; (*struct Find_state*)
 
 module Disk_node : sig
   type ('a, 'b, 'c) dnode = Disk_node of ('a list * 'c list) |
-    Disk_leaf of ('a * 'b) list
+    Disk_leaf of ('a * 'b) list  [@@deriving yojson]
   val mk_Disk_node : 'a list * 'b list -> ('a, 'c, 'b) dnode
   val dest_Disk_leaf : ('a, 'b, 'c) dnode -> ('a * 'b) list
   val dest_Disk_node : ('a, 'b, 'c) dnode -> 'a list * 'c list
 end = struct
 
 type ('a, 'b, 'c) dnode = Disk_node of ('a list * 'c list) |
-  Disk_leaf of ('a * 'b) list;;
+  Disk_leaf of ('a * 'b) list  [@@deriving yojson];;
 
 let rec check_length_ks_rs
   ks_rs =
@@ -1255,13 +1270,13 @@ let rec dest_im_finished
 end;; (*struct Insert_many_state*)
 
 module Insert_state : sig
-  type ('a, 'b, 'c) i12_t = I1 of 'c | I2 of ('c * ('a * 'c))
+  type ('a, 'b, 'c) i12_t = I1 of 'c | I2 of ('c * ('a * 'c))  [@@deriving yojson]
   type ('a, 'b, 'c) insert_state =
     I_down of (('a, 'b, 'c) Find_state.find_state * 'b) |
     I_up of
       (('a, 'b, 'c) i12_t *
         ('a, 'c, unit) Searching_and_splitting.rsplit_node_ext list)
-    | I_finished of 'c
+    | I_finished of 'c  [@@deriving yojson]
   val dummy : unit
   val dest_i_finished : ('a, 'b, 'c) insert_state -> 'c option
   val mk_insert_state : 'a -> 'b -> 'c -> ('a, 'b, 'c) insert_state
@@ -1273,14 +1288,14 @@ module Insert_state : sig
             'b -> 'a -> 'd -> ('a, 'd, 'c) insert_state -> bool
 end = struct
 
-type ('a, 'b, 'c) i12_t = I1 of 'c | I2 of ('c * ('a * 'c));;
+type ('a, 'b, 'c) i12_t = I1 of 'c | I2 of ('c * ('a * 'c))   [@@deriving yojson];;
 
 type ('a, 'b, 'c) insert_state =
   I_down of (('a, 'b, 'c) Find_state.find_state * 'b) |
   I_up of
     (('a, 'b, 'c) i12_t *
       ('a, 'c, unit) Searching_and_splitting.rsplit_node_ext list)
-  | I_finished of 'c;;
+  | I_finished of 'c   [@@deriving yojson];;
 
 let rec wf_d
   k_ord r2t t0 s d =
@@ -1367,13 +1382,13 @@ end;; (*struct Insert_state*)
 
 module Delete_state : sig
   type ('a, 'b, 'c) del_t = D_small_leaf of ('a * 'b) list |
-    D_small_node of ('a list * 'c list) | D_updated_subtree of 'c
+    D_small_node of ('a list * 'c list) | D_updated_subtree of 'c   [@@deriving yojson]
   type ('a, 'b, 'c) delete_state =
     D_down of (('a, 'b, 'c) Find_state.find_state * 'c) |
     D_up of
       (('a, 'b, 'c) del_t *
         (('a, 'c, unit) Searching_and_splitting.rsplit_node_ext list * 'c))
-    | D_finished of 'c
+    | D_finished of 'c   [@@deriving yojson]
   val dummy : unit
   val dest_d_finished : ('a, 'b, 'c) delete_state -> 'c option
   val mk_delete_state : 'a -> 'b -> ('a, 'c, 'b) delete_state
@@ -1385,14 +1400,14 @@ module Delete_state : sig
 end = struct
 
 type ('a, 'b, 'c) del_t = D_small_leaf of ('a * 'b) list |
-  D_small_node of ('a list * 'c list) | D_updated_subtree of 'c;;
+  D_small_node of ('a list * 'c list) | D_updated_subtree of 'c   [@@deriving yojson];;
 
 type ('a, 'b, 'c) delete_state =
   D_down of (('a, 'b, 'c) Find_state.find_state * 'c) |
   D_up of
     (('a, 'b, 'c) del_t *
       (('a, 'c, unit) Searching_and_splitting.rsplit_node_ext list * 'c))
-  | D_finished of 'c;;
+  | D_finished of 'c   [@@deriving yojson];;
 
 let rec wf_d
   k_ord r2f t0 s d =
@@ -1544,14 +1559,17 @@ let rec dot_constants
 
 end;; (*struct Params*)
 
-module Monad : sig
+module type MONAD = sig
   type ('a, 'b) mm
   val bind : ('a -> ('b, 'c) mm) -> ('a, 'c) mm -> ('b, 'c) mm
   val fmap : ('a -> 'b) -> ('a, 'c) mm -> ('b, 'c) mm
   val dummy : unit
   val return : 'a -> ('a, 'b) mm
-end = struct
+end
+
+module Make(Monad : MONAD) = struct
 
+(*
 type ('a, 'b) mm = EMPTY__;;
 
 let rec bind b a = failwith "undefined";;
@@ -1569,6 +1587,7 @@ let dummy : unit
 let rec return x = failwith "undefined";;
 
 end;; (*struct Monad*)
+*)
 
 module Store_ops : sig
   val store_free :
@@ -2456,3 +2475,6 @@ let rec lss_step
       | Leaf_stream_state.LS_up x -> Monad.return (step_up x));;
 
 end;; (*struct Leaf_stream*)
+
+
+end
