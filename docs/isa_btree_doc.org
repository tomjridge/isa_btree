-*- org -*-
* doc:node_ops



* doc:frame_ops


kn <= k < kn+1

> 
>            Left half (incl kn)    Midpoint         Right half
>     +-----------------------+
>     |                       |                   +--------------+
>     | (None k1 k2 ...), kn  |     +-----+       |              |
>     |                       |     |     |       |  kn+1 ... k  |
>     |   r0  r1 r2 ...   XXX |     | rn  |       |              |
>     |                       |     +-----+       |  rn+1 ... rm |
>     +-----------------------+                   +--------------+
> 
> 
> 
> 


NOTE
- left half can be empty?


** old doc from isa

The expected implementation is:

  lh:'node???,
  midkey:'k,
  midpoint:'r,
  rh:'node???,
  backing_node_blk_ref:'r

where 'node is the impl of nodes

NOTE that "half" and "midpoint" are misleading

Representation of lh, rh:  (ks are None, k1, k2... )

  ... k2-X k3    l
... r1-/r2\  r3 ....
     --------
lh is ... _r1^k1
midkey is k2
midpt is r2
rh is ^k3_r3 ...

k0=None k1 |  k2 | k3  kn  k(n+1)
           +-----+
   r0   r1 |  r2 | r3  rn  r(n+1)

Neither the left half or rh is a "node-like" thing. 

Would storing k1,k2 separately help? What is the keyspace impl?

The difficulty is how to implement "unsplit frame rkr" (for r,k,r' say)


k0=None k1 |  k2 k | k3  kn  k(n+1)
           +-------+
   r0   r1 |  r  r'| r3  rn  r(n+1)

Then we can add None -> r, k -> r' for right-half, then merge on key k2

But then we have problems with lh_dest_snoc which should return r1,k2

So we should model lh as keyspace * k, and we need the ability to get the max binding and all other bindings from a keyspace



** unsplit
                             
unsplit (r1,k,r2) should give:

... kn  k   kn+1 ...   
... r1  r2  rn+1 ...


which can be phrased as the merge of lh and rh', where rh' is:

| None | k | rh
| r1   | r2

and the separating key is k1


** rh_dest_cons should give (kn+1,rn+1,rest)


