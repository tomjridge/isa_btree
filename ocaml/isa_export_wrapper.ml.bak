open Isa_btree_intf
(* open Tjr_profile.Util.Profiler *)

(** Wrap Isabelle-exported code in an OCaml-friendly interface *)

(** Control isabelle assert flag *)
module Isa_export_assert_flag = struct
  let _ = 
    Isa_export.assert_flag
    |> Global.register ~name:"Isa_export.assert_flag" 

  let enable_isa_checks () = Isa_export.assert_flag:=true
  let disable_isa_checks () = Isa_export.assert_flag:=false
  let _ = disable_isa_checks ()  (* default is to disable *)
end
include Isa_export_assert_flag


(** {2 Misc} *)

open Isa_export

(** {2 Leaf stream implementation} *)
open Leaf_node_frame_impls

module Internal_leaf_stream_impl = struct
  
  (** We augment the basic Isabelle type with some extra information:
     the current leaf. This type is for debugging - you shouldn't need
     to access components. *)
  type ('r,'leaf,'frame) _t = { 
    leaf: 'leaf;
    isa_ls_state: ('r,'leaf,'frame)Isa_export.Leaf_stream_state.leaf_stream_state 
  }

  (* we need to repeatedly step the leaf state to the point that we
     hit a leaf and dest_LS_leaf <> None; INVARIANT every ls_state
     constructed or exposed here has dest_LS_leaf <> None; FIXME do we
     want to introduce a new type for this? *)

  
  (* FIXME there is a similarly named function in store_to_map - rename this one *)
  let make_leaf_stream_ops (type k v r leaf frame) ~monad_ops ~(leaf_kvs:leaf -> (k*v)list)  
      ~isa_ls_step_to_next_leaf 
    =
    let ( >>= ) = monad_ops.bind in
    let return = monad_ops.return in

    let dest_leaf = Isa_export.Leaf_stream_state.dest_LS_leaf in
    let is_finished = Isa_export.Leaf_stream_state.ls_is_finished in
    
    let next_leaf t1 : ((r,leaf,frame) _t option,'t) m = 
      match is_finished t1.isa_ls_state with
      | true -> return None
      | false -> (
          t1.isa_ls_state |> isa_ls_step_to_next_leaf >>= function
          | None -> return None
          | Some isa_ls_state ->
            dest_leaf isa_ls_state |> fun (Some leaf) -> 
            return (Some{leaf;isa_ls_state}))
    in
    let _ = next_leaf in
    
    let make_leaf_stream r : ((r,leaf,frame) _t,'t) m = 
      Isa_export.Leaf_stream_state.make_initial_ls_state r |> fun isa_ls_state ->
      match dest_leaf isa_ls_state with
      | None -> (
          isa_ls_step_to_next_leaf isa_ls_state >>= fun (Some isa_ls_state) -> 
          isa_ls_state |> dest_leaf |> fun (Some leaf) -> 
          return { leaf; isa_ls_state })
      | Some leaf -> return { leaf; isa_ls_state }
    in
    let ls_leaf t1 = t1.leaf in
    let ls_step t1 = next_leaf t1 in
    let ls_kvs t1 = t1.leaf |> leaf_kvs in
    {make_leaf_stream; ls_step; ls_kvs}



  (* util ---------------------- *)

  (** Get all (key,value) pairs from a leaf stream. Debugging only. *)
  let _all_leaves ~monad_ops ~leaf_stream_ops ~r : ('leaf list,'t) m = 
    let ( >>= ) = monad_ops.bind in
    let return = monad_ops.return in
    let {make_leaf_stream; ls_step; ls_kvs} = leaf_stream_ops in
    let rec loop leaves s =
      Isa_export.Leaf_stream_state.ls_is_finished s |> function
      | true -> return leaves
      | false -> 
        ls_step s >>= fun (Some s) -> loop (ls_kvs s::leaves) s
    in 
    r |> make_leaf_stream >>= fun s -> loop [] s


(*
  (** Utility: call [insert_many] in a loop. *)
  let insert_all ~monad_ops ~insert_many =
    let ( >>= ) = monad_ops.bind in
    let return = monad_ops.return in
    let rec loop k v kvs =
      insert_many k v kvs >>= (fun kvs' -> 
        match kvs' with
        | [] -> return ()
        | (k,v)::kvs -> loop k v kvs)
    in loop
*)

end

(*type ('k,'v,'r) _leaf_stream_impl = 
  ('r, ('k, 'v) _leaf_impl, ('k, 'r) _frame_impl) Internal_leaf_stream_impl._t*)


(* conversions isa<->ocaml ------------------------------------------ *)

(** {2 Conversions between Isabelle types and OCaml types} *)

module Internal_conversions = struct
  (* isa numbers:
     type nat = Nat of Big_int.big_int;;
     type int = Int_of_integer of Big_int.big_int;;
  *)
  let int2nat n = Arith.nat_of_integer (Big_int.big_int_of_int n) 
  let nat2bigint (Arith.Nat n) = n 
  let bigint2int = Big_int.int_of_big_int 
  let nat2int (n:Arith.nat) = n |> nat2bigint |> bigint2int 
  let int2isa i = Arith.Int_of_integer(Big_int.big_int_of_int i) 
  open Constants_type
  let cs2isa (cs:constants) = 
    Constants_and_size_types.make_constants 
      (int2nat cs.min_leaf_size) 
      (int2nat cs.max_leaf_size)
      (int2nat cs.min_node_keys)
      (int2nat cs.max_node_keys)
  let cmp2isa (f: 'k -> 'k -> int) = fun k1 k2 -> f k1 k2 |> int2isa 
end



(* pre-map operations ----------------------------------------------- *)

(** {2 Pre-map operations} *)

module Pre_map_ops_type = struct
  (** Pre-map ops, with an explicit root pointer *)
  type ('k,'v,'r,'leaf,'frame,'t) pre_map_ops = {
    leaf_lookup: 'k -> 'leaf -> 'v option;
    find: r:'r -> k:'k -> ('r * 'leaf * 'frame list,'t) m;
    insert: r:'r -> k:'k -> v:'v -> ('r option,'t) m;
    delete: r:'r -> k:'k -> ('r,'t) m;
  }
end
include Pre_map_ops_type


(* ------------------------------------------------------------------ *)
(** {2 Insert many} 

The semantics of this operation is: for a list of (k,v), the operation
inserts all kvs, and returns the updated root (or None to indicate the
tree was updated in place).

*) 
(*
module Pre_insert_many_type = struct
  type ('k,'v,'r,'t) pre_insert_many_op = {
    insert_many: r:'r -> kvs:('k*'v)list -> (('k*'v)list * 'r option,'t) m
  }
end
include Pre_insert_many_type
*)

(** {2 Insert all}

The semantics of this operation is: for a list of (k,v), the operation
   inserts all kvs, and returns the updated root (or the original root
   if tree was updated in place).  *)

module Insert_all_type = struct
  type ('k,'v,'r,'t) insert_all_type = {
    insert_all: r:'r -> kvs:('k*'v)list -> ('r,'t) m
  }
end
include Insert_all_type

module Insert_many_type = struct
  type ('k,'v,'r,'t) insert_many_type = {
    insert_many: r:'r -> k:'k -> v:'v -> kvs:('k*'v)list -> (('k*'v)list*'r option, 't)m
  }
end
include Insert_many_type

(* make_find_insert_delete ------------------------------------------ *)

module Internal1 = struct
  open Internal_conversions

  let leaf_ops2isa leaf_ops  = 
    let { leaf_lookup; leaf_insert; leaf_remove; leaf_length;
          leaf_steal_right; leaf_steal_left;
          leaf_merge; split_large_leaf; leaf_to_kvs; kvs_to_leaf } = leaf_ops 
    in
    let dbg_leaf = fun l -> () in  (* FIXME *)
    Isa_export.Disk_node.make_leaf_ops
      leaf_lookup 
      leaf_insert 
      leaf_remove
      (fun l -> leaf_length l |> int2nat)
      (fun (l1,l2) -> leaf_steal_right (l1,l2) |> fun (a,b,c) -> (a,(b,c)))
      (fun (l1,l2) -> leaf_steal_left (l1,l2) |> fun (a,b,c) -> (a,(b,c)))
      leaf_merge
      (fun n l -> split_large_leaf (nat2int n) l |> fun (a,b,c) -> (a,(b,c)))
      leaf_to_kvs 
      dbg_leaf

  let dbg_node = fun n -> ()   (* FIXME *)

  let node_ops2isa node_ops = 
    let {split_node_at_k_index; node_merge; node_steal_right;
         node_steal_left; node_keys_length; node_make_small_root;
         node_get_single_r;node_to_krs;krs_to_node} = node_ops 
    in
    Isa_export.Disk_node.make_node_ops
      (fun nat n -> split_node_at_k_index (nat2int nat) n |> fun (x,y,z) -> (x,(y,z)))
      (fun (a,(b,c)) -> node_merge (a,b,c))
      (fun (a,(b,c)) -> node_steal_right (a,b,c) |> fun (a,b,c) -> (a,(b,c)))
      (fun (a,(b,c)) -> node_steal_left (a,b,c) |> fun (a,b,c) -> (a,(b,c))) 
      (fun x -> x |> node_keys_length |> int2nat)
      (fun (a,(b,c)) -> node_make_small_root (a,b,c))
      node_get_single_r
      node_to_krs
      dbg_node

  let frame_ops2isa frame_ops = 
    let { split_node_on_key; midpoint; get_focus;
          get_focus_and_right_sibling; get_left_sibling_and_focus;
          replace; frame_to_node; get_midpoint_bounds;
          backing_node_blk_ref; split_node_for_leaf_stream;
          step_frame_for_leaf_stream; dbg_frame } = frame_ops
    in
    let seg2isa (a,b,c,d) = (a,(b,(c,d))) in
    let isa2seg (a,(b,(c,d))) = (a,b,c,d) in
    Isa_export.Stacks_and_frames.make_frame_ops
      split_node_on_key
      midpoint
      (fun f -> get_focus f |> fun (a,b,c) -> (a,(b,c)))
      (fun f -> get_focus_and_right_sibling f |> function None -> None | Some(a,b,c,d,e) -> Some(a,(b,(c,(d,e)))))
      (fun f -> get_left_sibling_and_focus f |> function None -> None | Some(a,b,c,d,e) -> Some(a,(b,(c,(d,e)))))
      (fun seg1 seg2 -> replace (isa2seg seg1) (isa2seg seg2))
      frame_to_node
      get_midpoint_bounds
      backing_node_blk_ref
      split_node_for_leaf_stream
      step_frame_for_leaf_stream
      dbg_frame 
end

module Internal_make_pre_map_ops_etc = struct
  let make (type t) ~monad_ops ~cs ~k_cmp ~store_ops ~dbg_tree_at_r = 
    let module A = struct

      open Internal_conversions
      open Internal1
      open Leaf_node_frame_impls

      module Monad = struct
        type nonrec t = t
        type ('a,'t) mm = ('a,t) m 
        let bind ab a = monad_ops.bind a ab
        let return a = monad_ops.return a
        let fmap f a = a |> bind (fun a -> return (f a))
      end

      module M = Isa_export.Make(Monad) 

      (* this is in the monad *)
      let store_ops2isa store_ops = 
        let {read;wrte;rewrite;free} = store_ops in
        M.Post_monad.make_store_ops read wrte rewrite free

      let leaf_ops0 = make_leaf_ops ~k_cmp 

      let node_ops0 = make_node_ops ~k_cmp 

      let frame_ops0 = Internal_frame_impl.make_frame_ops ~k_cmp 

      let cs,k_cmp,leaf_ops,node_ops,frame_ops,store_ops = 
        (cs2isa cs),(cmp2isa k_cmp),(leaf_ops2isa leaf_ops0),
        (node_ops2isa node_ops0),(frame_ops2isa frame_ops0),
        (store_ops2isa store_ops)

      let find  = 
        let find = M.Find.find frame_ops store_ops in
        fun ~(r:'r) ~(k:'k) -> find r k |> Monad.fmap (fun (a,(b,c)) -> (a,b,c))

      let insert = 
        let insert = M.Insert.insert cs leaf_ops node_ops frame_ops store_ops dbg_tree_at_r in
        fun  ~(r:'r) ~(k:'k) ~(v:'v) -> insert r k v

      let delete  =
        let delete = M.Delete.delete cs leaf_ops node_ops frame_ops store_ops dbg_tree_at_r in
        fun ~(r:'r) ~(k:'k) -> delete r k

      let leaf_stream_ops = 
        let open M.Leaf_stream in
        Internal_leaf_stream_impl.make_leaf_stream_ops ~monad_ops ~leaf_kvs:leaf_ops0.leaf_to_kvs ~isa_ls_step_to_next_leaf:(ls_step_to_next_leaf frame_ops store_ops)


      let leaf_lookup = leaf_ops0.leaf_lookup 

      let pre_map_ops = {leaf_lookup;find;insert;delete} 

      let ( >>= ) = monad_ops.bind
      let return = monad_ops.return

      let insert_many =
        let insert_many = M.Insert_many.insert_many cs k_cmp leaf_ops node_ops frame_ops store_ops in 
        let insert_many = fun ~(r:'r) ~(k:'k) ~(v:'v) ~kvs -> insert_many r k v kvs in
        { insert_many }

      let insert_all = 
        (* let im_step = M.Insert_many.im_step cs k_cmp leaf_ops node_ops frame_ops store_ops in *)
        let insert_many = M.Insert_many.insert_many cs k_cmp leaf_ops node_ops frame_ops store_ops in 
        let iter_m = iter_m ~monad_ops in
        let insert_all ~r ~kvs = 
          (r,kvs) |> 
          iter_m  (fun (r,kvs) -> 
              match kvs with 
              [] -> return None
              | (k,v)::kvs -> (
                  insert_many r k v kvs >>= fun (kvs,r') -> 
                  match r' with
                  | None -> return (Some(r,kvs))
                  | Some r' -> return (Some(r',kvs))))
          >>= fun (r',_) -> return r'  (* NOTE may return the original r *)
        in
        let _ = insert_all in
        { insert_all }
    end
    in
    let open A in
    fun f -> f
        ~pre_map_ops
        ~insert_many
        ~insert_all
        ~leaf_stream_ops
        ~leaf_ops:leaf_ops0
        ~node_ops:node_ops0
        ~frame_ops:frame_ops0

  let _ = make
end

(** {2 Recap, packaging and export}  *)

(** Finally, redeclare make_find_insert_delete, hiding the internal
   types as much as possible. If you need access to the implementations, use the {!Internal_make_ops} module above. *)

module Internal_export : sig
  type ('k,'r) node_impl
  type ('k,'v) leaf_impl
  type ('k,'v,'r) dnode_impl = (('k,'r) node_impl, ('k,'v) leaf_impl)dnode
  type ('k,'r) frame_impl 
  type ('k,'v,'r) leaf_stream_impl

  (** The [isa_btree] type is what is exported by the make function; use the projections such as pre_map_ops to break this down *)
  type ('k,'v,'r,'t) isa_btree

  (** NOTE the k_cmp ordering is not observable at the store_ops
     interface, nor at the pre_map_ops and above interfaces; hence we
     can avoid having a "comparator witness" type to parallel k_cmp *)
  val make_isa_btree : 
    monad_ops:'a monad_ops ->
    cs:Constants.constants ->
    k_cmp:('k -> 'k -> int) ->
    store_ops:('r, (('k, 'r) node_impl, ('k, 'v) leaf_impl) dnode, 'a)
        store_ops ->
    dbg_tree_at_r:('r -> (unit, 'a) m) ->
    ('k,'v,'r,'a)isa_btree
(** Prettier type (essentially [store_ops -> isa_btree]): {%html:
<pre>
    monad_ops:'a monad_ops ->
    cs:constants ->
    k_cmp:('k -> 'k -> int) ->
    store_ops:('r, (('k, 'r) node_impl, ('k, 'v) leaf_impl) dnode, 'a) store_ops ->
    dbg_tree_at_r:('r -> (unit, 'a) m) ->
    ('k,'v,'r,'a)isa_btree
</pre> %} *)

  val pre_map_ops: ('k,'v,'r,'a) isa_btree -> 
    ('k, 'v, 'r, ('k, 'v) leaf_impl, ('k, 'r) frame_impl, 'a) pre_map_ops 

  val insert_all : ('k,'v,'r,'a) isa_btree -> 
    ('k,'v,'r,'a) insert_all_type

  val insert_many: ('k,'v,'r,'a) isa_btree -> 
    ('k,'v,'r,'a) insert_many_type

  val leaf_stream_ops: ('k,'v,'r,'a) isa_btree -> 
    ('k,'v,'r, ('k,'v,'r) leaf_stream_impl, 'a) leaf_stream_ops

  (** NOTE node_ops and leaf_ops should only be used for conversions to/from lists *)
  val node_ops: ('k,'v,'r,'a) isa_btree -> ('k, 'r, ('k, 'r) node_impl) node_ops

  val leaf_ops: ('k,'v,'r,'a) isa_btree -> ('k, 'v, ('k, 'v) leaf_impl) leaf_ops

  (** When dealing with store_ops and lower interfaces (blocks etc) we
     need access to node_ops and leaf_ops without constructing the
     full B-tree *)
  val make_node_ops: k_cmp:('k -> 'k -> int) -> ('k,'r,('k,'r) node_impl) node_ops
  val make_leaf_ops: k_cmp:('k -> 'k -> int) -> ('k,'v,('k,'v) leaf_impl) leaf_ops

end = struct

  type ('k,'r) node_impl = ('k,'r)_node_impl
  type ('k,'v) leaf_impl = ('k,'v)_leaf_impl
      
  type ('k,'v,'r) dnode_impl = (('k,'r) node_impl, ('k,'v) leaf_impl)dnode
  type ('k,'r) frame_impl = ('k,'r)_frame_impl
  type ('k,'v,'r) leaf_stream_impl = ('k,'v,'r)_leaf_stream_impl

  type ('k,'v,'r,'a) isa_btree = {
    pre_map_ops     : ('k, 'v, 'r, ('k, 'v) leaf_impl, ('k, 'r) frame_impl, 'a) pre_map_ops;
    leaf_stream_ops : ('k, 'v, 'r, ('k,'v,'r)leaf_stream_impl, 'a) leaf_stream_ops;
    leaf_ops        : ('k, 'v, ('k, 'v) leaf_impl) leaf_ops;
    node_ops        : ('k, 'r, ('k, 'r) node_impl) node_ops;
    frame_ops       : ('k, 'r, ('k, 'r) frame_impl, ('k,'r) node_impl) frame_ops;
    insert_all      : ('k, 'v, 'r, 'a) insert_all_type;
    insert_many     : ('k, 'v, 'r, 'a) insert_many_type;
  }

  let make_isa_btree ~monad_ops ~cs ~k_cmp ~store_ops ~dbg_tree_at_r : ('k,'v,'r,'a) isa_btree = 
    Internal_make_pre_map_ops_etc.make ~monad_ops ~cs ~k_cmp ~store_ops ~dbg_tree_at_r
    @@ fun 
      ~pre_map_ops
      ~insert_many
      ~insert_all
      ~leaf_stream_ops
      ~leaf_ops
      ~node_ops
      ~frame_ops
    -> 
    {pre_map_ops;leaf_stream_ops;leaf_ops;node_ops;frame_ops;insert_all;insert_many}

  let pre_map_ops x = x.pre_map_ops

  let leaf_stream_ops x = x.leaf_stream_ops

  let leaf_ops x = x.leaf_ops

  let node_ops x = x.node_ops

  let insert_all x = x.insert_all

  let insert_many x = x.insert_many


  let make_node_ops ~k_cmp = Internal_node_impl.make_node_ops ~k_cmp
  let make_leaf_ops ~k_cmp = Internal_leaf_impl.make_leaf_ops ~k_cmp
end
include Internal_export


(* FIXME perhaps include this as a component of isa_btree *)
let wf_tree ~cs ~ms ~k_cmp = 
  let open Internal_conversions in
  Isa_export.Tree.wf_tree 
    (cs |> cs2isa)
    ms
    (k_cmp |> cmp2isa)

let _ = wf_tree
