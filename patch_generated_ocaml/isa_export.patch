--- orig/isa_export.ml	2019-05-09 15:19:29.036049106 +0100
+++ patched/isa_export.ml	2019-05-09 15:19:31.128035798 +0100
@@ -1,3 +1,17 @@
+(** This file is exported from Isabelle, and lightly patched (eg to
+   include this comment!). The OCaml interfaces wrap this basic
+   functionality. *)
+
+let assert_flag = ref true
+
+module type MONAD = sig
+   type ('a, 'b) mm
+   val bind : ('a -> ('b, 'c) mm) -> ('a, 'c) mm -> ('b, 'c) mm
+   val fmap : ('a -> 'b) -> ('a, 'c) mm -> ('b, 'c) mm
+   val return : 'a -> ('a, 'b) mm
+end
+
+
 module Fun : sig
   val id : 'a -> 'a
   val comp : ('a -> 'b) -> ('c -> 'a) -> 'c -> 'b
@@ -25,7 +39,7 @@ let rec max _A a b = (if less_eq _A a b
 end;; (*struct Orderings*)
 
 module Arith : sig
-  type nat
+  type nat = Nat of Big_int.big_int
   val less_eq_nat : nat -> nat -> bool
   val less_nat : nat -> nat -> bool
   val ord_nat : nat Orderings.ord
@@ -203,13 +217,15 @@ let rec is_None x = Option.is_none x;;
 
 let rec rev_apply x f = f x;;
 
-let rec failwitha x = rev_apply "FIXME patch" (fun _ -> failwith "undefined");;
+let rec failwitha x = failwith x
 
 let rec iter_step
   f x = (let a = f x in (match a with None -> x | Some aa -> iter_step f aa));;
 
-let rec assert_true
-  f = rev_apply "FIXME patch" (fun _ -> failwith "undefined");;
+let rec assert_true f = (
+  !assert_flag |> function
+  | true -> f()
+  | false -> true)
 
 let rec impossible1 x = failwitha x;;
 
@@ -927,6 +943,8 @@ let rec return x = failwith "undefined";
 
 end;; (*struct Monad*)
 
+module Make(Monad:MONAD) = struct
+
 module Post_monad : sig
   type ('a, 'b, 'c) store_ops =
     Make_store_ops of
@@ -1960,3 +1978,5 @@ let rec make_initial_im_state
     (let i = Insert_state.make_initial_insert_state r k v in (i, kvs));;
 
 end;; (*struct Insert_many_state*)
+
+end (* Make *)
